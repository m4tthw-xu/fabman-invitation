name: Promote Dev to Production

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for promotion to production'
        required: true
        type: string
      skip_tests:
        description: 'Skip dev environment tests'
        required: false
        default: false
        type: boolean

jobs:
  validate-dev:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout develop branch
      uses: actions/checkout@v4
      with:
        ref: develop
        
    - name: Test dev environment health
      run: |
        echo "🔍 Testing dev environment health..."
        DEV_URL="https://fabman-search-dev-env.eba-xb4jdeqp.us-east-1.elasticbeanstalk.com"
        
        # Test basic connectivity
        if curl -f -s --max-time 30 "$DEV_URL" > /dev/null; then
          echo "✅ Dev environment is responding"
        else
          echo "❌ Dev environment is not responding"
          exit 1
        fi
        
        # Test API endpoint
        if curl -f -s --max-time 30 "$DEV_URL/api/search-members?q=test" > /dev/null; then
          echo "✅ API endpoint is working"
        else
          echo "⚠️ API endpoint test failed (may be expected without credentials)"
        fi

  create-promotion-pr:
    runs-on: ubuntu-latest
    needs: validate-dev
    if: always() && (needs.validate-dev.result == 'success' || inputs.skip_tests)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Get latest changes
      run: |
        git fetch origin develop
        git fetch origin main
        
    - name: Check if promotion is needed
      id: check_changes
      run: |
        # Check if there are differences between develop and main
        if git diff --quiet origin/main...origin/develop; then
          echo "changes_exist=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No changes to promote - develop and main are in sync"
        else
          echo "changes_exist=true" >> $GITHUB_OUTPUT
          echo "📋 Changes found between develop and main"
          git log --oneline origin/main..origin/develop
        fi
    - name: Get current timestamp
      id: timestamp
      run: echo "date=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        
    - name: Create Pull Request
      if: steps.check_changes.outputs.changes_exist == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "🚀 Promote to Production: ${{ github.run_number }}"
        body: |
          ## 🚀 Production Promotion Request
          
          **Reason:** ${{ inputs.reason }}
          **Initiated by:** @${{ github.actor }}
          **Date:** ${{ steps.timestamp.outputs.date }}
          
          ### 📋 Deployment Checklist
          - [ ] Dev environment tests passed
          - [ ] Code review completed
          - [ ] Database migrations reviewed (if any)
          - [ ] Environment variables verified
          - [ ] Rollback plan confirmed
          
          ### 🔄 Changes Included
          This PR promotes all changes from `develop` to `main` for production deployment.
          
          **Auto-generated by GitHub Actions** - Workflow Run: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### ⚠️ Post-Merge Actions
          - [ ] Monitor production deployment
          - [ ] Verify application functionality
          - [ ] Check error logs
          - [ ] Confirm user-facing features work
          
        branch: promote-to-prod-${{ github.run_number }}
        base: main
        head: develop
        draft: false
        labels: |
          deployment
          production
          auto-promotion
          
    - name: No changes summary
      if: steps.check_changes.outputs.changes_exist == 'false'
      run: |
        echo "## ✅ No Promotion Needed" >> $GITHUB_STEP_SUMMARY
        echo "The develop branch is already in sync with main." >> $GITHUB_STEP_SUMMARY
        echo "No pull request was created." >> $GITHUB_STEP_SUMMARY
        
    - name: Promotion summary  
      if: steps.check_changes.outputs.changes_exist == 'true'
      run: |
        echo "## 🚀 Promotion PR Created" >> $GITHUB_STEP_SUMMARY
        echo "A pull request has been created to promote changes to production." >> $GITHUB_STEP_SUMMARY
        echo "**Reason:** ${{ inputs.reason }}" >> $GITHUB_STEP_SUMMARY
        echo "Please review and merge the PR to deploy to production." >> $GITHUB_STEP_SUMMARY