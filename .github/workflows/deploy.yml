name: CD - Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    environment: production # GitHub environment for additional protection

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate dependencies
        run: |
          python -c "import flask, fabman, tiw_secrets; print('Core dependencies validated')"

      - name: Generate deployment package
        run: |
          zip -r deploy.zip . -x "*.git*" "*__pycache__*" "*.pyc" ".env" "requirements-dev.txt" ".github/*" "README.md"

      - name: Get timestamp for version label
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Deploy to Production Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: fabman-search-v2
          environment_name: fabman-search-v2-env
          region: us-east-1
          version_label: prod-${{ github.sha }}-${{ steps.timestamp.outputs.timestamp }}
          deployment_package: deploy.zip
          wait_for_deployment: true
          wait_for_environment_recovery: 300

      - name: Clean up deployment package
        run: rm deploy.zip

      - name: Validate production deployment
        run: |
          echo "🔍 Validating production deployment..."
          PROD_URL="http://fabman-search-v2-env.eba-xb4jdeqp.us-east-1.elasticbeanstalk.com/"

          # Wait for deployment to stabilize
          sleep 30

          # Test basic connectivity with retries
          for i in {1..5}; do
            if curl -f -s --max-time 30 "$PROD_URL" > /dev/null; then
              echo "✅ Production environment is responding (attempt $i)"
              break
            else
              echo "⏳ Waiting for production environment (attempt $i/5)..."
              sleep 30
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Production environment validation failed"
              exit 1
            fi
          done

          # Test that static files are served
          if curl -f -s --max-time 30 "$PROD_URL/favicon.ico" > /dev/null; then
            echo "✅ Static files are being served"
          else
            echo "⚠️ Static files test failed"
          fi

          echo "## 🎉 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** $PROD_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment validated:** $(date)" >> $GITHUB_STEP_SUMMARY
